/*
iPubSub API

A lightweight, scalable pub-sub service API that supports both real-time message delivery and persistent storage.  iPubSub enables publishers to send messages to lightweight topics/streams, and subscribers to receive messages  using efficient long-polling. Topics are created dynamically on first message without explicit provisioning.  **Core Features:** - **Real-time Matching**: Publishers and subscribers are matched in real-time using long polling - **Dynamic Topics**: Lightweight topics/streams created automatically on first message - **Dual Storage**: Messages can be delivered in-memory for real-time consumption and/or persisted for replay - **Per-message TTL**: Individual message expiration (not stream-level) - **Horizontal Scaling**: Distributed hash ring for stream routing across nodes

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package genapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)

type DefaultAPI interface {

	/*
		ApiV1StreamsReceiveGet Subscribe to messages from a stream/topic

		Subscribers use this endpoint to receive messages for a specific streamId (topic).
	Uses long polling - waits for messages within the configured timeout period.
	Returns 424 if no messages arrive within timeout.


		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiApiV1StreamsReceiveGetRequest
	*/
	ApiV1StreamsReceiveGet(ctx context.Context) ApiApiV1StreamsReceiveGetRequest

	// ApiV1StreamsReceiveGetExecute executes the request
	//  @return ReceiveResponse
	ApiV1StreamsReceiveGetExecute(r ApiApiV1StreamsReceiveGetRequest) (*ReceiveResponse, *http.Response, error)

	/*
		ApiV1StreamsSendPost Publish message to a stream/topic

		Publishers use this endpoint to send messages to a specific streamId (topic).

	The message can be delivered in-memory for real-time consumption and/or
	persisted to database for replay. Topics are created automatically on first message.


		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiApiV1StreamsSendPostRequest
	*/
	ApiV1StreamsSendPost(ctx context.Context) ApiApiV1StreamsSendPostRequest

	// ApiV1StreamsSendPostExecute executes the request
	ApiV1StreamsSendPostExecute(r ApiApiV1StreamsSendPostRequest) (*http.Response, error)
}

// DefaultAPIService DefaultAPI service
type DefaultAPIService service

type ApiApiV1StreamsReceiveGetRequest struct {
	ctx            context.Context
	ApiService     DefaultAPI
	streamId       *string
	timeoutSeconds *int32
	readFromDB     *bool
	dbResumeToken  *string
}

// Unique identifier for the stream/topic to subscribe to
func (r ApiApiV1StreamsReceiveGetRequest) StreamId(streamId string) ApiApiV1StreamsReceiveGetRequest {
	r.streamId = &streamId
	return r
}

// Maximum time to wait for messages (seconds)
func (r ApiApiV1StreamsReceiveGetRequest) TimeoutSeconds(timeoutSeconds int32) ApiApiV1StreamsReceiveGetRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

// Whether to read from persistent storage (Phase 2)
func (r ApiApiV1StreamsReceiveGetRequest) ReadFromDB(readFromDB bool) ApiApiV1StreamsReceiveGetRequest {
	r.readFromDB = &readFromDB
	return r
}

// Token for resuming from specific position (Phase 2)
func (r ApiApiV1StreamsReceiveGetRequest) DbResumeToken(dbResumeToken string) ApiApiV1StreamsReceiveGetRequest {
	r.dbResumeToken = &dbResumeToken
	return r
}

func (r ApiApiV1StreamsReceiveGetRequest) Execute() (*ReceiveResponse, *http.Response, error) {
	return r.ApiService.ApiV1StreamsReceiveGetExecute(r)
}

/*
ApiV1StreamsReceiveGet Subscribe to messages from a stream/topic

Subscribers use this endpoint to receive messages for a specific streamId (topic).
Uses long polling - waits for messages within the configured timeout period.
Returns 424 if no messages arrive within timeout.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiApiV1StreamsReceiveGetRequest
*/
func (a *DefaultAPIService) ApiV1StreamsReceiveGet(ctx context.Context) ApiApiV1StreamsReceiveGetRequest {
	return ApiApiV1StreamsReceiveGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ReceiveResponse
func (a *DefaultAPIService) ApiV1StreamsReceiveGetExecute(r ApiApiV1StreamsReceiveGetRequest) (*ReceiveResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ReceiveResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.ApiV1StreamsReceiveGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/streams/receive"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.streamId == nil {
		return localVarReturnValue, nil, reportError("streamId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "streamId", r.streamId, "form", "")
	if r.timeoutSeconds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeoutSeconds", r.timeoutSeconds, "form", "")
	} else {
		var defaultValue int32 = 30
		r.timeoutSeconds = &defaultValue
	}
	if r.readFromDB != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "readFromDB", r.readFromDB, "form", "")
	}
	if r.dbResumeToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dbResumeToken", r.dbResumeToken, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV1StreamsSendPostRequest struct {
	ctx         context.Context
	ApiService  DefaultAPI
	sendRequest *SendRequest
}

func (r ApiApiV1StreamsSendPostRequest) SendRequest(sendRequest SendRequest) ApiApiV1StreamsSendPostRequest {
	r.sendRequest = &sendRequest
	return r
}

func (r ApiApiV1StreamsSendPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiV1StreamsSendPostExecute(r)
}

/*
ApiV1StreamsSendPost Publish message to a stream/topic

Publishers use this endpoint to send messages to a specific streamId (topic).

The message can be delivered in-memory for real-time consumption and/or
persisted to database for replay. Topics are created automatically on first message.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiApiV1StreamsSendPostRequest
*/
func (a *DefaultAPIService) ApiV1StreamsSendPost(ctx context.Context) ApiApiV1StreamsSendPostRequest {
	return ApiApiV1StreamsSendPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *DefaultAPIService) ApiV1StreamsSendPostExecute(r ApiApiV1StreamsSendPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.ApiV1StreamsSendPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/streams/send"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.sendRequest == nil {
		return nil, reportError("sendRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.sendRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
